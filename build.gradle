buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
		gradleDockerVersion = '0.20.1'
	}
	repositories {
        jcenter()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'com.palantir.docker-compose'
apply plugin: 'com.palantir.docker-run'

group = 'me.bubbleinvestor'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile("org.springframework.boot:spring-boot-devtools")
	compile('org.elasticsearch.client:elasticsearch-rest-high-level-client:6.3.2')
	runtime('org.springframework.boot:spring-boot-devtools')
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
    distributionType = Wrapper.DistributionType.ALL
}


docker {
    dependsOn build
    name "${project.group}/${bootJar.baseName}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

dockerCompose {
    template 'docker-compose.yml.template'
    dockerComposeFile 'docker-compose.yml'
}

dockerRun {
    name "${project.group}-container"
    image "${project.group}/${bootJar.baseName}:latest"
    command 'java', '-Djava.security.egd=file:/dev/./urandom', '-jar', 'app.jar'
}

task stage(dependsOn: ['build', 'clean'])